// <auto-generated />
using System;
using KwikKwekSnack.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KwikKwekSnack.Domain.Migrations
{
    [DbContext(typeof(KwikKwekSnackContext))]
    [Migration("20221011231540_removed_extra_image")]
    partial class removed_extra_image
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KwikKwekSnack.Domain.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinimalPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkExtra", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.HasKey("ExtraId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("DrinkExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkOrder", b =>
                {
                    b.Property<int>("DrinkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrinkOrderId"), 1L, 1);

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkSizeId")
                        .HasColumnType("int");

                    b.HasKey("DrinkOrderId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("DrinkSizeId");

                    b.ToTable("DrinkOrder");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkOrderExtra", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkOrderId")
                        .HasColumnType("int");

                    b.HasKey("ExtraId", "DrinkOrderId");

                    b.HasIndex("DrinkOrderId");

                    b.ToTable("DrinkOrderExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceMultiplier")
                        .HasColumnType("float");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("DrinkSizes");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Snack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StandardPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Snacks");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackExtra", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("SnackId")
                        .HasColumnType("int");

                    b.HasKey("ExtraId", "SnackId");

                    b.HasIndex("SnackId");

                    b.ToTable("SnackExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackOrder", b =>
                {
                    b.Property<int>("SnackOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SnackOrderId"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SnackId")
                        .HasColumnType("int");

                    b.HasKey("SnackOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SnackId");

                    b.ToTable("SnackOrders");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackOrderExtra", b =>
                {
                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("SnackOrderId")
                        .HasColumnType("int");

                    b.HasKey("ExtraId", "SnackOrderId");

                    b.HasIndex("SnackOrderId");

                    b.ToTable("SnackOrderExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Drink", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Order", null)
                        .WithMany("DrinkOrders")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkExtra", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Drink", "Drink")
                        .WithMany("AvailableExtras")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikKwekSnack.Domain.Extra", "Extra")
                        .WithMany("ExtraOfDrink")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkOrder", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikKwekSnack.Domain.DrinkSize", "DrinkSize")
                        .WithMany()
                        .HasForeignKey("DrinkSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("DrinkSize");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkOrderExtra", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.DrinkOrder", "DrinkOrder")
                        .WithMany("ChosenExtras")
                        .HasForeignKey("DrinkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikKwekSnack.Domain.Extra", "Extra")
                        .WithMany("ExtraOfDrinkOrder")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkOrder");

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Order", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackExtra", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Extra", "Extra")
                        .WithMany("ExtraOfSnack")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikKwekSnack.Domain.Snack", "Snack")
                        .WithMany("AvailableExtras")
                        .HasForeignKey("SnackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extra");

                    b.Navigation("Snack");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackOrder", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Order", null)
                        .WithMany("SnackOrders")
                        .HasForeignKey("OrderId");

                    b.HasOne("KwikKwekSnack.Domain.Snack", "Snack")
                        .WithMany()
                        .HasForeignKey("SnackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snack");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackOrderExtra", b =>
                {
                    b.HasOne("KwikKwekSnack.Domain.Extra", "Extra")
                        .WithMany("ExtraOfSnackOrder")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KwikKwekSnack.Domain.SnackOrder", "SnackOrder")
                        .WithMany("ChosenExtras")
                        .HasForeignKey("SnackOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extra");

                    b.Navigation("SnackOrder");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Drink", b =>
                {
                    b.Navigation("AvailableExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.DrinkOrder", b =>
                {
                    b.Navigation("ChosenExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Extra", b =>
                {
                    b.Navigation("ExtraOfDrink");

                    b.Navigation("ExtraOfDrinkOrder");

                    b.Navigation("ExtraOfSnack");

                    b.Navigation("ExtraOfSnackOrder");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Order", b =>
                {
                    b.Navigation("DrinkOrders");

                    b.Navigation("SnackOrders");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.Snack", b =>
                {
                    b.Navigation("AvailableExtras");
                });

            modelBuilder.Entity("KwikKwekSnack.Domain.SnackOrder", b =>
                {
                    b.Navigation("ChosenExtras");
                });
#pragma warning restore 612, 618
        }
    }
}
